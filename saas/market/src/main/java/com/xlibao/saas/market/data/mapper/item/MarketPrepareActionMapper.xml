<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xlibao.saas.market.data.mapper.item.MarketPrepareActionMapper">
    <resultMap id="BaseResultMap" type="com.xlibao.market.data.model.MarketPrepareAction">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="market_id" property="marketId" jdbcType="BIGINT"/>
        <result column="action_passport_id" property="actionPassportId" jdbcType="BIGINT"/>
        <result column="executor_passport_id" property="executorPassportId" jdbcType="BIGINT"/>
        <result column="item_location" property="itemLocation" jdbcType="VARCHAR"/>
        <result column="hope_item_template_id" property="hopeItemTemplateId" jdbcType="BIGINT"/>
        <result column="hope_item_barcode" property="hopeItemBarcode" jdbcType="VARCHAR"/>
        <result column="has_complete_quantity" property="hasCompleteQuantity" jdbcType="INTEGER"/>
        <result column="hope_item_quantity" property="hopeItemQuantity" jdbcType="INTEGER"/>
        <result column="hope_executor_date" property="hopeExecutorDate" jdbcType="TIMESTAMP"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="complete_time" property="completeTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="SummaryMap" type="com.xlibao.market.data.model.MarketShelvesDailyTaskLogger">
        <result column="hope_total_item_quantity" property="hopeTotalItemQuantity" jdbcType="INTEGER"/>
        <result column="actual_item_quantity" property="actualItemQuantity" jdbcType="INTEGER"/>
        <result column="hope_total_barcode_quantity" property="hopeTotalBarcodeQuantity" jdbcType="INTEGER"/>
        <result column="actual_barcode_quantity" property="actualBarcodeQuantity" jdbcType="INTEGER"/>
        <result column="hope_executor_date" property="hopeExecutorDate" jdbcType="TIMESTAMP"/>
    </resultMap>

    <insert id="createPrepareAction">
        insert into market_prepare_action(market_id, action_passport_id, item_location, hope_item_template_id, hope_item_barcode, has_complete_quantity, hope_item_quantity, hope_executor_date, type, status, create_time)
        values(#{marketId}, #{actionPassportId}, #{itemLocation}, #{hopeItemTemplateId}, #{hopeItemBarcode}, #{hasCompleteQuantity}, #{hopeItemQuantity}, #{hopeExecutorDate}, #{type}, #{status}, #{createTime})
    </insert>

    <select id="getPrepareActionForId" resultMap="BaseResultMap">
        select * from market_prepare_action where id = #{taskId}
    </select>

    <select id="distinctPrepareItemBarcode" resultType="int">
        select ifnull(count(distinct hope_item_barcode), 0) from market_prepare_action where market_id = #{marketId} and status = #{matchStatusSet} and executor_passport_id in(0, ${passportId})
        and hope_executor_date = #{hopeExecutorDate} and has_complete_quantity > 0
    </select>

    <select id="getPrepareAction" resultMap="BaseResultMap">
        select * from market_prepare_action where market_id = #{marketId} and item_location = #{itemLocation} and type = #{type} and status in(${statusSet})
    </select>

    <select id="getPrepareActions" resultMap="BaseResultMap">
        select * from market_prepare_action where market_id = #{marketId} and status in(${statusSet})
        <if test="executorPassportId != 0"> and executor_passport_id = #{executorPassportId} </if> order by
        <if test="statusSet == '4,2'"> complete_time desc </if>
        <if test="statusSet == '1,3'"> hope_executor_date desc, type desc, has_complete_quantity, item_location </if>
        limit #{pageStartIndex}, #{pageSize}
    </select>

    <select id="getPrepareActionsForLocationSet" resultMap="BaseResultMap">
        select * from market_prepare_action where market_id = #{marketId} and item_location in (${locationSet}) and status in (${statusSet}) order by item_location asc, hope_item_quantity asc
    </select>

    <select id="getPrepareActionForBarcode" resultMap="BaseResultMap">
        select * from market_prepare_action where market_id = #{marketId} and status in (${statusSet}) and hope_item_barcode = #{barcode} order by item_location asc
    </select>

    <select id="getRemainActionRows" resultType="int">
        select count(*) from market_prepare_action where market_id = #{marketId} and status in(${statusSet})
        <if test="type != 0"> and type = #{type} </if>
    </select>

    <select id="preparedSummaryData" resultMap="SummaryMap">
        select hope_executor_date, sum(hope_item_quantity) hope_total_item_quantity, sum(has_complete_quantity) actual_item_quantity, ifnull(count(distinct hope_item_barcode), 0) hope_total_barcode_quantity from market_prepare_action
        where market_id = #{marketId} and type = #{type} and status in (${statusSet}) and executor_passport_id = #{passportId} group by hope_executor_date
    </select>

    <update id="modifyPrepareActionStatus">
        update market_prepare_action set status = #{status}, has_complete_quantity = has_complete_quantity + #{incrementQuantity}, complete_time = #{time}, executor_passport_id = #{executorPassportId}
        <if test="hopeExecutorQuantity != 0">, hope_item_quantity = #{hopeExecutorQuantity}</if>
        where market_id = #{marketId} and item_location = #{itemLocation} and type = #{type} and status in(${matchStatusSet})
    </update>

    <update id="batchModifyPrepareActionStatus">
        update market_prepare_action set status = #{targetStatus}, executor_passport_id = #{executorPassportId} where market_id = #{marketId} and status in(${matchStatusSet}) and executor_passport_id in(0, ${executorPassportId})
    </update>
</mapper>