<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xlibao.order.data.mapper.order.OrderEntryMapper">
    <resultMap id="BaseResultMap" type="com.xlibao.metadata.order.OrderEntry">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="sequence_number" property="sequenceNumber" jdbcType="VARCHAR"/>
        <result column="order_sequence_number" property="orderSequenceNumber" jdbcType="VARCHAR"/>
        <result column="partner_id" property="partnerId" jdbcType="VARCHAR"/>
        <result column="partner_user_id" property="partnerUserId" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="deliver_type" property="deliverType" jdbcType="INTEGER"/>
        <result column="deliver_status" property="deliverStatus" jdbcType="INTEGER"/>
        <result column="refund_status" property="refundStatus" jdbcType="INTEGER"/>
        <result column="payment_type" property="paymentType" jdbcType="VARCHAR"/>
        <result column="trans_type" property="transType" jdbcType="VARCHAR"/>
        <result column="user_source" property="userSource" jdbcType="INTEGER"/>
        <result column="day_sort_number" property="daySortNumber" jdbcType="INTEGER"/>
        <result column="push_type" property="pushType" jdbcType="INTEGER"/>
        <result column="shipping_passport_id" property="shippingPassportId" jdbcType="BIGINT"/>
        <result column="shipping_nick_name" property="shippingNickName" jdbcType="VARCHAR"/>
        <result column="shipping_province" property="shippingProvince" jdbcType="VARCHAR"/>
        <result column="shipping_city" property="shippingCity" jdbcType="VARCHAR"/>
        <result column="shipping_district" property="shippingDistrict" jdbcType="VARCHAR"/>
        <result column="shipping_address" property="shippingAddress" jdbcType="VARCHAR"/>
        <result column="shipping_location" property="shippingLocation" jdbcType="VARCHAR"/>
        <result column="shipping_phone" property="shippingPhone" jdbcType="VARCHAR"/>
        <result column="receipt_user_id" property="receiptUserId" jdbcType="VARCHAR"/>
        <result column="receipt_nick_name" property="receiptNickName" jdbcType="VARCHAR"/>
        <result column="receipt_province" property="receiptProvince" jdbcType="VARCHAR"/>
        <result column="receipt_city" property="receiptCity" jdbcType="VARCHAR"/>
        <result column="receipt_district" property="receiptDistrict" jdbcType="VARCHAR"/>
        <result column="receipt_address" property="receiptAddress" jdbcType="VARCHAR"/>
        <result column="receipt_phone" property="receiptPhone" jdbcType="VARCHAR"/>
        <result column="receipt_location" property="receiptLocation" jdbcType="VARCHAR"/>
        <result column="courier_passport_id" property="courierPassportId" jdbcType="BIGINT"/>
        <result column="courier_nick_name" property="courierNickName" jdbcType="VARCHAR"/>
        <result column="courier_phone" property="courierPhone" jdbcType="VARCHAR"/>
        <result column="total_distance" property="totalDistance" jdbcType="BIGINT"/>
        <result column="current_location" property="currentLocation" jdbcType="VARCHAR"/>
        <result column="collecting_fees" property="collectingFees" jdbcType="TINYINT"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="actual_price" property="actualPrice" jdbcType="BIGINT"/>
        <result column="total_price" property="totalPrice" jdbcType="BIGINT"/>
        <result column="discount_price" property="discountPrice" jdbcType="BIGINT"/>
        <result column="distribution_fee" property="distributionFee" jdbcType="BIGINT"/>
        <result column="price_logger" property="priceLogger" jdbcType="VARCHAR"/>
        <result column="cancel_logger" property="cancelLogger" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="payment_time" property="paymentTime" jdbcType="TIMESTAMP"/>
        <result column="confirm_time" property="confirmTime" jdbcType="TIMESTAMP"/>
        <result column="body" property="body" jdbcType="VARCHAR"/>
        <result column="detail" property="detail" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="createOrderEntry" useGeneratedKeys="true" keyProperty="id" parameterType="com.xlibao.metadata.order.OrderEntry">
        insert into order_entry(sequence_number, order_sequence_number, partner_id, partner_user_id, type, status, deliver_status, deliver_type, push_type, user_source, trans_type, shipping_passport_id, shipping_nick_name, shipping_province, shipping_city, shipping_district,
            shipping_address, shipping_location, shipping_phone, receipt_user_id, receipt_nick_name, receipt_province, receipt_city, receipt_district, receipt_address, receipt_phone, receipt_location, current_location, total_distance,
            collecting_fees, actual_price, total_price, discount_price, distribution_fee, price_logger, body, detail, remark, payment_time, confirm_time)
        values(#{sequenceNumber}, #{orderSequenceNumber}, #{partnerId}, #{partnerUserId}, #{type}, #{status}, #{deliverStatus}, #{deliverType}, #{pushType}, #{userSource}, #{transType}, #{shippingPassportId}, #{shippingNickName}, #{shippingProvince}, #{shippingCity}, #{shippingDistrict},
            #{shippingAddress}, #{shippingLocation}, #{shippingPhone}, #{receiptUserId}, #{receiptNickName}, #{receiptProvince}, #{receiptCity}, #{receiptDistrict}, #{receiptAddress}, #{receiptPhone}, #{receiptLocation}, #{currentLocation},
            #{totalDistance}, #{collectingFees}, #{actualPrice}, #{totalPrice}, #{discountPrice}, #{distributionFee}, #{priceLogger}, #{body}, #{detail}, #{remark}, #{paymentTime}, #{confirmTime})
    </insert>

    <select id="getOrderEntry" resultMap="BaseResultMap">
        select * from order_entry where id = #{orderId}
    </select>

    <select id="getOrderEntryForSequenceNumber" resultMap="BaseResultMap">
        select * from order_entry where order_sequence_number = #{orderSequenceNumber}
    </select>

    <select id="getOrderEntrys" resultMap="BaseResultMap">
        select * from order_entry where sequence_number = #{sequenceNumber} order by payment_time desc, id desc
    </select>

    <select id="showConsumerOrders" resultMap="BaseResultMap">
        select * from order_entry where partner_id = #{partnerId}
        <if test="orderStatusSet != 0">and status in (${orderStatusSet})</if>
        <if test="target == 0">and partner_user_id = #{partnerUserId}</if>
        <if test="target == 1">and receipt_user_id = #{partnerUserId}</if>
        <if test="type != -1">and type = #{type}</if>
        order by payment_time desc, id desc limit #{pageStartIndex}, #{pageSize}
    </select>

    <select id="showMerchantOrders" resultMap="BaseResultMap">
        select * from order_entry where partner_id = #{partnerId} and shipping_passport_id = #{shippingPassportId} and
        status in (${orderStatusSet})
        <if test="type != -1">and type = #{type}</if>
        order by payment_time desc, id desc limit #{pageStartIndex}, #{pageSize}
    </select>

    <select id="showCourierOrders" resultMap="BaseResultMap">
        select * from order_entry where partner_id = #{partnerId} and courier_passport_id = #{courierPassportId} and
        status in (${orderStatusSet})
        <if test="type != -1">and type = #{type}</if>
        order by payment_time desc, id desc limit #{pageStartIndex}, #{pageSize}
    </select>

    <select id="searchOrders" resultMap="BaseResultMap">
        select * from order_entry where partner_id = #{partnerId}
        <if test="roleType == 2">and shipping_passport_id = #{passportId} and (order_sequence_number like concat('%',
            #{searchKeyValue}, '%') or receipt_nick_name like concat('%', #{searchKeyValue}, '%'))
        </if>
        <if test="roleType == 1">and partner_user_id = #{passportId} and (order_sequence_number like concat('%',
            #{searchKeyValue}, '%') or shipping_nick_name like concat('%', #{searchKeyValue}, '%'))
        </if>
        <if test="type != -1">and type = #{type}</if>
        and status != 4 order by payment_time desc, id desc limit #{pageStartIndex}, #{pageSize}
    </select>

    <select id="findInvalidOrderSize" resultType="int">
        select count(*) from order_entry where partner_id = #{partnerId} and type = #{orderType} and status = #{matchStatus} and #{timeout} >= create_time
    </select>

    <select id="findInvalidOrders" resultMap="BaseResultMap">
        select * from order_entry where partner_id = #{partnerId} and type = #{orderType} and status = #{matchStatus} and #{timeout} >= create_time
    </select>

    <update id="acceptOrder">
        update order_entry set status = #{status}, courier_passport_id = #{courierPassportId}, courier_nick_name = #{courierNickName}, courier_phone = #{courierPhone} where id = #{orderId} and status = #{matchBeforeStatus}
    </update>

    <update id="paymentOrder">
        update order_entry set status = #{status}, trans_type = #{transType}, day_sort_number = #{daySortNumber}, payment_time = now() where id = #{orderId} and status = #{matchBeforeStatus}
    </update>

    <update id="updateOrderStatus">
        update order_entry set status = #{status}, deliver_status = #{deliverStatus} where id = #{orderId} and status = #{matchBeforeStatus} and deliver_status = #{beforeDeliverStatus}
    </update>

    <update id="correctOrderPrice">
        update order_entry set actual_price = #{actualPrice}, total_price = #{totalPrice}, discount_price = #{discountPrice}, distribution_fee = #{distributionFee}, deliver_type = #{deliveyType} where id = #{orderId}
    </update>

    <update id="fillDailyRowSort">
        update order_entry set day_sort_number = #{daySortNumber} where id = #{orderId}
    </update>

    <update id="refreshRefundStatus">
        update order_entry set refund_status = refund_status | #{refundStatus} where order_id = #{orderId} and ((refund_status &amp; #{refundStatus}) != #{refundStatus})
    </update>

    <update id="batchResetOverdueOrderStatus">
        update order_entry set status = #{expectStatus} where partner_id = #{partnerId} and type = #{orderType} and status = #{matchStatus} and #{timeout} >= create_time
    </update>

    <update id="modifyReceivingData">
        update order_entry set current_location = #{currentLocation}, collecting_fees = #{collectingFees}, receipt_province = #{receiptProvince}, receipt_city = #{receiptCity}, receipt_district = #{receiptDistrict},
        receipt_address = #{receiptAddress}, receipt_nick_name = #{receiptNickName}, receipt_phone = #{receiptPhone}, receipt_location = #{receiptLocation}, remark = #{remark} where order_sequence_number = #{orderSequenceNumber}
    </update>
</mapper>