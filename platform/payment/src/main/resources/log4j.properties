#日志分级TRACE,DEBUG,INFO,WARN,ERROR

######################## 公共输出等级及输出方式 #########################################
#将全局等级设置为INFO，全部INFO以上等级的日志信息均显示到控制台
log4j.rootCategory=info,stdout

#日志信息输出至标准输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#只输出指定级别以上的日志到文件
log4j.appender.stdout.Threshold=trace
log4j.appender.stdout.ImmediateFlush=TRUE
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d [%t] %p %l - %m%n

log4j.logger.com.github.pagehelper=info
log4j.logger.org.apache.ibatis=info
log4j.logger.com.github.pagehelper.mapper = TRACE

log4j.logger.java.sql.ResultSet=info
log4j.logger.org.apache=info
log4j.logger.java.sql.Connection=info
log4j.logger.java.sql.Statement=info
log4j.logger.java.sql.PreparedStatement=info

########################## 一般信息日志 ##########################
log4j.logger.xlibaolog=trace,xlibaoFile

#日志信息输出至指定名称的文件中，按量产生日志文件
log4j.appender.xlibaoFile=org.apache.log4j.RollingFileAppender
#只输出指定级别以上的日志到文件
log4j.appender.xlibaoFile.Threshold=trace
log4j.appender.xlibaoFile.ImmediateFlush=TRUE
log4j.appender.xlibaoFile.File=log/life/saas-supplychain.log
#是否追加方式，还是重写方式
log4j.appender.xlibaoFile.Append=true
log4j.appender.xlibaoFile.MaxFileSize=100MB
log4j.appender.xlibaoFile.MaxBackupIndex=500
log4j.appender.xlibaoFile.layout=org.apache.log4j.PatternLayout
log4j.appender.xlibaoFile.layout.ConversionPattern=%d [%t] %p %l - %m%n
#log4j.appender.xlibaoFile.layout.ConversionPattern=%d{yy-MM-dd HH:mm:ss.SSS} %5p [%F:%L] - %m%n

##################################################################################
#可以设置级别：debug>info>error
#debug：显示debug、info、error
#info：显示info、error
#error：只error
#log4j.rootLogger=info,sns_console,sns_file_log
#log4j.rootLogger=info,appender1
#log4j.rootLogger=error,appender1

#输出到控制台
#log4j.appender.sns_console=org.apache.log4j.ConsoleAppender
#log4j.appender.sns_console.Threshold=WARN
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

# 1.ConsoleAppender选项
#       Threshold=WARN:指定日志消息的输出最低层次。
#       ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#       Target=System.err：默认情况下是：System.out,指定输出控制台
#
# 2.FileAppender 选项
#       Threshold=WARN:指定日志消息的输出最低层次。
#       ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#       File=mylog.txt:指定消息输出到mylog.txt文件。
#       Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#
# 3.DailyRollingFileAppender 选项
#       Threshold=WARN:指定日志消息的输出最低层次。
#       ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#       File=mylog.txt:指定消息输出到mylog.txt文件。
#       Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#       DatePattern=''.''yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：
#          1)''.''yyyy-MM: 每月
#          2)''.''yyyy-ww: 每周
#          3)''.''yyyy-MM-dd: 每天
#          4)''.''yyyy-MM-dd-a: 每天两次
#          5)''.''yyyy-MM-dd-HH: 每小时
#          6)''.''yyyy-MM-dd-HH-mm: 每分钟
#
# 4.RollingFileAppender 选项
#       Threshold=WARN:指定日志消息的输出最低层次。
#       ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#       File=mylog.txt:指定消息输出到mylog.txt文件。
#       Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#       MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
#       MaxBackupIndex=2:指定可以产生的滚动文件的最大数。

#样式
#log4j.appender.sns_console.layout=org.apache.log4j.PatternLayout
#log4j.appender.gamexp_db_console.layout.ConversionPattern=%m -- 打印时间：%d{yyyy-MM-dd HH:mm:ss}%n

# org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#输出到文件
#log4j.appender.sns_file_log=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.sns_file_log.File=logs/sns_gs_201202131817.log
#log4j.appender.sns_file_log.layout=org.apache.log4j.PatternLayout
#log4j.appender.sns_file_log.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n
#log4j.appender.gamexp_db_file_log.layout.ConversionPattern=%m -- 打印时间：%d{yyyy-MM-dd HH:mm:ss}%n
#log4j.appender.gamexp_file_log.layout.ConversionPattern=%l:%n  -- %m -- %d{yyyy-MM-dd HH:mm:ss} - 耗时：%r%n%n
# log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n
# 这里需要说明的就是日志信息格式中几个符号所代表的含义：
# －X号: X信息输出时左对齐；
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个"%"字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符