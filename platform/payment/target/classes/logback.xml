<?xml version="1.0" encoding="UTF-8"?>

<!--  scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true  -->
<!--  scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。  -->
<!--  debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false  -->
<configuration scan="true" scanPeriod="5000" debug="false">
    <property name="logName" value="payment"/>
    <contextName>${logName}</contextName>

    <!--  控制台日志  -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %p %replace(%caller{1}){'\t|Caller.{1}0|\r\n|at| ', ''} - %m%n
            </pattern>
            <!-- <pattern>[%le][%d][%thread][%40logger{60}][%M\(\)] - %msg%n</pattern> -->
            <charset>GBK</charset> <!--  此处设置字符集 UTF-8时 在IDEA控制台显示内容为乱码 -->
        </encoder>
    </appender>

    <!--  所有内容日志文件  -->
    <appender name="logFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${catalina.home}/logs/${logName}.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${catalina.home}/logs/${logName}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--  切割方式：每天产生单独日志文件 单文件最大100M 最多保存30天记录 最大容量为10G  -->
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %p %replace(%caller{1}){'\t|Caller.{1}0|\r\n|at| ', ''} - %m%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- <logger name="org.apache.ibatis" level="ERROR"> -->
    <!-- <appender-ref ref="STDOUT"/> -->
    <!-- </logger> -->

    <!--<logger name="java.sql" level="debug">-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->

    <logger name="org.springframework" level="ERROR"/>
    <!-- <logger name="httpclient.wire.header" level="info" /> -->
    <logger name="ch.qos" level="ERROR"/>

    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="logFile"/>
        <!-- <appender-ref ref="ERROR_FILE" /> -->
    </root>

    <!-- c{length} -->
    <!-- lo{length} -->
    <!-- logger{length} -->
    <!-- 输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串。 -->

    <!-- Conversion specifier Logger name Result &#45;&#45; -->
    <!-- %logger        mainPackage.sub.sample.Bar	mainPackage.sub.sample.Bar -->
    <!-- %logger{0}	    mainPackage.sub.sample.Bar	Bar -->
    <!-- %logger{5}	    mainPackage.sub.sample.Bar	m.s.s.Bar -->
    <!-- %logger{10}    mainPackage.sub.sample.Bar	m.s.s.Bar -->
    <!-- %logger{15}    mainPackage.sub.sample.Bar	m.s.sample.Bar -->
    <!-- %logger{16}    mainPackage.sub.sample.Bar	m.sub.sample.Bar -->
    <!-- %logger{26}    mainPackage.sub.sample.Bar	mainPackage.sub.sample.Bar -->
    <!--   -->
    <!-- C{length} -->
    <!-- class{length} 输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。 -->

    <!-- contextName -->
    <!-- cn 输出上下文名称。 -->

    <!-- d{pattern} -->
    <!-- date {pattern}	输出日志的打印日志，模式语法与java.text.SimpleDateFormat 兼容。 Conversion Pattern Result -->

    <!-- %d 2006-10-20 14:06:49,812 -->
    <!-- %date 2006-10-20 14:06:49,812 -->
    <!-- %date{ISO8601} 2006-10-20 14:06:49,812 -->
    <!-- %date{HH:mm:ss.SSS} 14:06:49.812 -->
    <!-- %date{dd MMM yyyy ;HH:mm:ss.SSS} 20 oct. 2006;14:06:49.812 -->

    <!-- F/file 输出执行记录请求的java源文件名。尽量避免使用，除非执行速度不造成任何问题。 -->

    <!-- caller{depth} caller{depth, evaluator-1, ... evaluator-n} 输出生成日志的调用者的位置信息，整数选项表示输出信息深度。 -->
    <!-- 例如， %caller{2}   输出为： -->
    <!-- 0    [main] DEBUG - logging statement -->
    <!-- Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22) -->
    <!-- Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17) -->

    <!-- 例如， %caller{3}   输出为： -->
    <!-- 16   [main] DEBUG - logging statement -->
    <!-- Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22) -->
    <!-- Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17) -->
    <!-- Caller+2   at mainPackage.ConfigTester.main(ConfigTester.java:38) -->

    <!-- L/line	输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。 -->
    <!-- m/msg/message	输出应用程序提供的信息。 -->
    <!-- M/method	输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。 -->
    <!-- n 输出平台先关的分行符“\n”或者“\r\n”。 -->
    <!-- p/le/level	输出日志级别。 -->
    <!-- r/relative	输出从程序启动到创建日志记录的时间，单位是毫秒 -->
    <!-- t/thread	输出产生日志的线程名。 -->
    <!-- replace(p){r, t} p 为日志内容，r 是正则表达式，将p中符合r的内容替换为t。 -->
    <!-- 例如， "%replace(%msg){'\s', ''}" -->

    <!-- 格式修饰符，与转换符共同使用： -->
    <!-- 可选的格式修饰符位于“%”和转换符之间。 -->
    <!-- 第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号"."后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。 -->

    <!-- 例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4 -->

    <!-- 美化例子(不建议使用于生产环境)：%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %p %replace(%caller{1}){'\t|Caller.{1}0|\r\n|at| ', ''} - %m%n -->
    <!-- 输出结果为(带链接点击效果)： -->
    <!-- 2017-06-26 23:33:17.369 [http-apr-8080-exec-6] INFO com.xlibao.common.servlet.XlibaoFilterChain.requestInfoTrack(XlibaoFilterChain.java:71) - 日志内容 -->
</configuration>